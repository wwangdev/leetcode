Symmetric Tree

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
For example, this binary tree [1,2,2,3,4,4,3] is symmetric: 
    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3

Note:
Bonus points if you could solve it both recursively and iteratively. 

Code:

#1 Recursive(DFS):
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    bool isSymmetric(TreeNode* l, TreeNode* r)
    {
        if (!l && !r)
            return 1;
        if ((l && !r) || (r && !l))
            return 0;
        return ((l->val == r->val) && isSymmetric(l->left, r->right) && isSymmetric(l->right, r->left));
    }
public:
    bool isSymmetric(TreeNode* root) {
        if (!root)
            return 1;
        return isSymmetric(root->left, root->right);
    }
};

#2 Iterative(BFS): Use Queue

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root)
            return 1;
        TreeNode* l = root->left;
        TreeNode* r = root->right;
        queue<TreeNode*> q1, q2;
        q1.push(l);
        q2.push(r);
        while (!q1.empty() && !q2.empty())
        {
            l = q1.front();
            q1.pop();
            r = q2.front();
            q2.pop();
            if (!l && !r)
                continue;
            else if (!l || !r)
                return 0;
            if (l->val != r->val)
                return 0;
            q1.push(l->left);
            q1.push(l->right);
            q2.push(r->right);
            q2.push(r->left);
        }
        return 1;
    }
};

Note: queue.pop() is void, to get the first element, use queue.front()!
