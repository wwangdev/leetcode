Third Maximum Number

Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).
Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.

Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.

Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

Code:

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        vector<int> res;
        for (int i = 0; i < 3; ++i)
            res.push_back(INT_MIN);
        int counter = 0;
        int hasMin = 0;
        for (auto c : nums)
        {
            if (c == res[0] || c == res[1] || c == res[2])
            {
                if (c == INT_MIN && !hasMin)
                {
                    ++counter;
                    hasMin = 1;
                }
                continue;
            }
            if (c > res[0])
            {
                res[2] = res[1];
                res[1] = res[0];
                res[0] = c;
                ++counter;
            }
            else if (c > res[1])
            {
                res[2] = res[1];
                res[1] = c;
                ++counter;
            }
            else if (c > res[2])
            {
                res[2] = c;
                ++counter;
            }
        }
        return counter >= 3 ? res[2] : res[0];
    }
};

Note: Too many checks. Optimized code:

class Solution {
public:
    int thirdMax(vector<int>& nums) {
        long long a, b, c;
        a = b = c = LLONG_MIN;
        for (auto num : nums)
        {
            if (num <= c || num == b || num == a)
                continue;
            c = num;
            if (b < c)
                swap(b, c);
            if (a < b)
                swap(a, b);
        }
        return c == LLONG_MIN ? a : c;
    }
};
