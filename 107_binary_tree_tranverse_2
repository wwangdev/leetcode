Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

Code:

#1. use counter for each level and BFS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;

*     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    int getDepth(TreeNode* root)
    {
        if (!root)
            return 0;
        return 1 + max(getDepth(root->left), getDepth(root->right));
    }
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        if (!root)
            return res;
        int d = getDepth(root);
        queue<TreeNode*> q;
        int count = 1;
        q.push(root);
        for (int j = 0; j < d; ++j)
        {
            vector<int> vec;
            TreeNode* n;
            int subCount = 0;
            for (int i = 0; i < count; ++i)
            {
                n = q.front();
                q.pop();
                if (n)
                {
                    vec.push_back(n->val);
                    if (n->left)
                    {
                        q.push(n->left);
                        ++subCount;
                    }
                    if (n->right)
                    {
                        q.push(n->right);
                        ++subCount;
                    }
                }            
            }
            count = subCount;
            res.push_back(vec);
        }
        reverse(res.begin(), res.end());
        return res;
    }
};

#2 DFS, use depth for vector index (better solution)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    vector<vector<int>> res;
    void levelFiller(TreeNode* root, int depth)
    {
        if (!root)
            return;
        if (depth >= res.size())
            res.push_back(vector<int>());
        res[depth].push_back(root->val);
        levelFiller(root->left, depth + 1);
        levelFiller(root->right, depth + 1);        
    }
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        levelFiller(root, 0);
        reverse(res.begin(), res.end());
        return res;
    }
};


