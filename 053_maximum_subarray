Maximum Subarray

Find the contiguous subarray within an array (containing at least one number) which has the largest sum. 
For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6. 
click to show more practice.

Code:
#1 Dynamic programming
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        // dynamic programming
        // for each element, consider the result of the previous one
        // if prev <= 0, take ele itself
        // else take the sum
        if (nums.empty())
            return 0;
        if (nums.size() == 1)
            return nums[0];
        int result = nums[0];
        int prev = nums[0];
        for (int i = 1; i < nums.size(); ++i)
        {
            if (prev <= 0)
            {
                result = max(nums[i], result);
                prev = nums[i];
            }
            else
            {
                prev += nums[i];
                result = max(prev, result);
            }
        }
        return result;
    }
};

#2 Drop when < 0
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.empty())
            return 0;
        // drop the result < 0
        int result = nums[0];
        int sum = 0;
        for (int i = 0; i < nums.size(); ++i)
        {
            sum += nums[i];
            result = max(result, sum);
            sum = max(sum, 0);
        }
        return result;
    }
};
