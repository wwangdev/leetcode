Single Number

Given an array of integers, every element appears twice except for one. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? 

Code:

#1. Hash (Practice for Map operation)

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        // use map as practice
        map<int, int> m;
        for (int i = 0; i < nums.size(); ++i)
        {
            ++m[nums[i]];
        }
        for (auto iter = m.begin(); iter != m.end(); ++iter)
        {
            if (iter->second % 2)
                return iter->first;
        }
        return 0;
    }
};

#2. XOR

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        // XOR since x ^ x = 0 and 0 ^ x = x
        int res = 0;
        for (int i = 0; i < nums.size(); ++i)
            res ^= nums[i];
        return res;
    }
};
