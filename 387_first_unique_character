First Unique Character in a String 

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1. 
Examples: 
s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

Note: You may assume the string contain only lowercase letters. 

Code:

class Solution {
public:
    int firstUniqChar(string s) {
        map<char, int> m;
        for (auto c : s)
            ++m[c];
        for (int i = 0; i < s.size(); ++i)
        {
            if (m[s[i]] == 1)
                return i;
        }
        return -1;
    }
};

Follow up: what if the string is very large and don't want to tranverse twice
Second pass only loop for the hash table

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, pair<int, int>> m; // first: idx, second: count;
        int idx = s.size();
        for (int i = 0; i < s.size(); ++i)
        {
            m[s[i]].first = i;
            ++m[s[i]].second;
        }
        for (auto iter = m.begin(); iter != m.end(); ++iter)
        {
            if (iter->second.second == 1)
            {
                idx = min(idx, iter->second.first);
            }
        }
        return idx == s.size() ? -1 : idx;
    }
};
