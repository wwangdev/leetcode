Majority Element

Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

Code:

#1. Hash -- O(n) time, O(n) space

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int, int> m;
        int result = 0;
        for (int i = 0; i < nums.size(); ++i)
        {
            ++m[nums[i]];
            if (m[nums[i]] > (nums.size()>>1))
            {
                result = nums[i];
                break;
            }
        }
        return result;
    }
};

#2. Moore's Voting Algorithm

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int major = nums[0];
        int counter = 1;
        for (int i = 1; i < nums.size(); ++i)
        {
            if (nums[i] == major)
                ++counter;
            else
            {
                if (counter)
                    --counter;
                else
                {
                    counter = 0;
                    major = nums[i];
                }
            }
        }
        return major;
    }
};
