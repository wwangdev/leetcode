Number of Boomerangs 

Given n points in the plane that are all pairwise distinct, a "boomerang" is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).
Find the number of boomerangs. You may assume that n will be at most 500 and coordinates of points are all in the range [-10000, 10000] (inclusive).
Example:
Input:
[[0,0],[1,0],[2,0]]

Output:
2

Explanation:
The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]

Code:

class Solution {
    int getSqureSum(const pair<int, int>& p)
    {
        return p.first * p.first + p.second * p.second;
    }
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        int res = 0;
        for (int i = 0; i < points.size(); ++i)
        {
            unordered_map<int, int> m;
            for (int j = 0; j < points.size(); ++j)
            {
                if (j == i)
                    continue;
                pair<int, int> t;
                t.first = points[j].first - points[i].first;
                t.second = points[j].second - points[i].second;
                ++m[getSqureSum(t)];
            }
            for (auto iter = m.begin(); iter != m.end(); ++iter)
                res += iter->second * (iter->second - 1);
        }
        return res;
    }
};

Note:
1. There is no default "-" operation for pair!!
2. Should use long for hash
