Binary Watch 

A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).
Each LED represents a zero or one, with the least significant bit on the right.
 
For example, the above binary watch reads "3:25".
Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.
Example: 
Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]

Note:
The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".

Code:

class Solution {
    vector<string> res;
    const vector<int> chart{vector<int>({1,2,4,8,1,2,4,8,16,32})};
    void helper(const int num, int cur, int idx, int hour, int min)
    {
        if (hour > 11 || min > 59)
            return;
        if (cur == num)
        {
            string s = to_string(hour) + (min < 10 ? ":0" : ":") + to_string(min);
            res.push_back(s);
            return;
        }
        for (int i = idx; i < chart.size(); ++i)
        {
            if (i < 4)
                helper(num, cur + 1, i + 1, hour + chart[i], min);
            else
                helper(num, cur + 1, i + 1, hour, min + chart[i]);
        }
    }
public:
    vector<string> readBinaryWatch(int num) {
        helper(num, 0, 0, 0, 0);
        return res;
    }
};
