Convert a Number to Hexadecimal 

Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, twoâ€™s complement method is used. 
Note: 
All letters in hexadecimal (a-f) must be in lowercase.
The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
The given number is guaranteed to fit within the range of a 32-bit signed integer.
You must not use any method provided by the library which converts/formats the number to hex directly.

Example 1: 
Input:
26

Output:
"1a"

Example 2: 
Input:
-1

Output:
"ffffffff"

Code:

class Solution {
    vector<char> lut;
    void initLut()
    {
        for (int i = 0; i <= 9; ++i)
            lut.push_back(i + '0');
        for (char c = 'a'; c <= 'f'; ++c)
            lut.push_back(c);
    }
public:
    string toHex(int num) {
        initLut();
        int mask = 0x0f;
        string s = "";
        for (int i = 0; i < 8; ++i)
        {
            int temp = num & mask;
            s += lut[temp];
            num >>= 4;
        }
        string res = "";
        int idx = s.size() - 1;
        while (idx >= 0 && s[idx] == '0')
            --idx;
        if (idx < 0)
            return "0";
        while (idx >= 0)
            res += s[idx--];
        return res;
    }
};

Note: use num == 0 in loop to reduce a "head 0" check and reduce the loop (worst 8).
Improved code:

class Solution {
    vector<char> lut;
    void initLut()
    {
        for (int i = 0; i <= 9; ++i)
            lut.push_back(i + '0');
        for (char c = 'a'; c <= 'f'; ++c)
            lut.push_back(c);
    }
public:
    string toHex(int num) {
        if (!num)
            return "0";
        initLut();
        int mask = 0x0f;
        string res = "";
        int idx = 0;
        while (num && idx++ < 8)
        {
            int temp = num & mask;
            res += lut[temp];
            num >>= 4;
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
