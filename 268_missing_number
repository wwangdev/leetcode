Missing Number

Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array. 
For example,
Given nums = [0, 1, 3] return 2. 
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity? 

Code:

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        nums.push_back(-1);
        // inplace swap
        int index = 0;
        while (index < nums.size())
        {
            if (nums[index] != index && nums[index] != -1)
            {
                swap(nums[index], nums[nums[index]]);
            }
            else
            {
                ++index;
                continue;
            }
        }
        for (int i = 0; i < nums.size(); ++i)
        {
            if (nums[i] == -1)
                return i;
        }
        return index;
    }
};
