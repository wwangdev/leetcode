Linked List Cycle

Given a linked list, determine if it has a cycle in it. 
Follow up:
Can you solve it without using extra space? 

Code:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if (!head)
            return 0;
        ListNode* slow = head;
        ListNode* fast = head->next;
        while (slow && fast && fast->next && slow != fast)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        if (slow && fast && fast->next)
            return 1;
        else
            return 0;
    }
};
